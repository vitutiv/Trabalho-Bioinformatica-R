R
ls
clear
cls
# 2. Leia o arquivo MB_gene_epression.txt atribuindo o data.frame resultante para uma matrix numérica.
# Ele contém informações da expressão de vários genes (linhas) em várias amostras (colunas).
# Leia o arquivo MB_pData_rib.txt atribindo o data.frame resultante para uma variável.
# Note que a ordem das colunas da matriz de expressão é a mesma ordem do IDs dos pacientes na tabela das informações clínicas e patológicas.
# Crie funções para:
#  a. Fazer a estatística da expressão de cada um dos genes para o o seguinte teste de hipótese (usar o teste t):
#    H0: a expressão do gene xi nas amostras do gupo A == a expressão do gene xi nas amostras do grupo B;
#    H1: a expressão do gene xi nas amostras do gupo A != a expressão do gene xi nas amostras do grupo B;
# b. Criar um boxplot para cada um dos genes diferencialmente expressos (considere o valor de p< 0.05).
install.packages("stringr rstudioapi")
library(rstudioapi)
library(stringr)
working_directory <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(working_directory)
# Ler o arquivo mb_gene_expression.txt
genes_expression <- read.delim("MB_gene_epression.txt")
# Converter o data.frame resultante para uma matrix numérica
genes_expression_matrix <- as.matrix(genes_expression)
# Ler o arquivo MB_pData_rib.txt
dados_paciente <- read.delim("MB_pData_rib.txt")
dados_paciente$PATIENT_ID <- str_replace_all(dados_paciente$PATIENT_ID, '-', '.' )
pacientes_ER_pos <- dados_paciente[dados_paciente$ER_IHC=="pos",]
pacientes_ER_neg <- dados_paciente[dados_paciente$ER_IHC=="neg",]
gerar_boxplot <- function (genes_expression, pos_transposta, neg_transposta){
for (i in 1:45){
gene <- paste(i," - ", rownames(genes_expression)[i])
print(gene)
result <- t.test(pos_transposta[, i], neg_transposta[, i])
png(file=paste(gene, "- pos.png"))
boxplot(pos_transposta[, i], main=rownames(genes_expression)[i])
dev.off()
png(file=paste(gene, "- neg.png"))
boxplot(neg_transposta[, i], main=rownames(genes_expression)[i])
dev.off()
print(result)
}
}
teste_hipotese <- function(genes_expression, pacientes_ER_pos, pacientes_ER_neg) {
genes_ER_pos <- matrix()
genes_ER_neg <- matrix()
for (i in 1:1867) {
if (is.element(names(genes_expression)[i], pacientes_ER_pos$PATIENT_ID) )
{
genes_ER_pos <- cbind(genes_ER_pos, genes_expression[i])
}
else
{
genes_ER_neg <- cbind(genes_ER_neg, genes_expression[i])
}
}
genes_ER_pos<-genes_ER_pos[ ,-c(1)]
genes_ER_neg<-genes_ER_neg[ ,-c(1)]
pos_transposta <- t(genes_ER_pos)
neg_transposta <- t(genes_ER_neg)
#dev.new()
gerar_boxplot(genes_expression, pos_transposta, neg_transposta)
}
teste_hipotese(genes_expression, pacientes_ER_pos, pacientes_ER_neg)
result <- t.test(pos_transposta[, i], neg_transposta[, i])
print(result$p)
print(result.p)
print(result)
result <- t.test(pos_transposta[, i], neg_transposta[, i])
pos_transposta <- t(genes_ER_pos)
genes_ER_pos <- matrix()
genes_ER_neg <- matrix()
for (i in 1:1867) {
if (is.element(names(genes_expression)[i], pacientes_ER_pos$PATIENT_ID) )
{
genes_ER_pos <- cbind(genes_ER_pos, genes_expression[i])
}
else
{
genes_ER_neg <- cbind(genes_ER_neg, genes_expression[i])
}
}
genes_ER_pos<-genes_ER_pos[ ,-c(1)]
genes_ER_neg<-genes_ER_neg[ ,-c(1)]
pos_transposta <- t(genes_ER_pos)
neg_transposta <- t(genes_ER_neg)
result <- t.test(pos_transposta[, i], neg_transposta[, i])
for(i in 1:45){
result <- t.test(pos_transposta[, i], neg_transposta[, i])
class(t.test)
print("˜WRF")
}
class(t.test)
class(t.test(pos_transposta[,1], neg_transposta[,1]))
class(t.test())
t.test(pos_transposta[,1], neg_transposta[,1])
result <- t.test(pos_transposta[,1], neg_transposta[,1])
class(result)
str(result)
print(result$p.value)
expr_gene <- cbind(pos_transposta[,i], neg_transposta[, i])
expr_gene <- rbind(pos_transposta[,i], neg_transposta[, i])
expr_gene <- rbind(pos_transposta[,i], neg_transposta[, i])
expr_gene <- bind(pos_transposta[,i], neg_transposta[, i])
r
expr_gene <- rbind(pos_transposta[,i], neg_transposta[, i])
expr_gene <- union(pos_transposta[,i], neg_transposta[, i])
for(i in 1:45){
result <- t.test(pos_transposta[, i], neg_transposta[, i])
print(result)
expr_gene <- union(pos_transposta[,i], neg_transposta[, i])
print(result)
if (result$p.value < 0.05) {
gene <- paste(i, " - ", colnames(expr_gene)[i])
gerar_boxplot(expr_gene)
}
}
pos_transposta <- t(genes_ER_pos)
neg_transposta <- t(genes_ER_neg)
#dev.new()
for(i in 1:45){
result <- t.test(pos_transposta[, i], neg_transposta[, i])
print(result)
expr_gene <- union(pos_transposta[,i], neg_transposta[, i])
if (result$p.value < 0.05) {
gene <- paste(i, " - ", colnames(expr_gene)[i])
gerar_boxplot(expr_gene)
}
}
pos_transposta <- t(genes_ER_pos)
neg_transposta <- t(genes_ER_neg)
#dev.new()
for(i in 1:45){
result <- t.test(pos_transposta[, i], neg_transposta[, i])
print(result)
expr_gene <- union(pos_transposta[,i], neg_transposta[, i])
if (result$p.value < 0.05) {
gene <- paste(i, " - ", colnames(expr_gene)[i])
gerar_boxplot(gene, expr_gene)
}
}
gene <- paste(i, " - ", colnames(expr_gene)[i])
gerar_boxplot(gene, expr_gene)
gene <- paste(i, " - ", colnames(expr_gene)[i])
}
gene
gene <- paste(i, " - ", colnames(genes_expression)[i])
gene
gerar_boxplot(gene, expr_gene)
gene <- paste(i, " - ", rownames(genes_expression)[i])
gene
gene <- paste(i, " - ", rownames(pos_transposta)[i])
gene
gene <- paste(i, " - ", colnames(pos_transposta)[i])
gene
gene <- paste(i, " - ", colnames(expr_gene)[i])
gene
gerar_boxplot(gene, expr_gene)
# 2. Leia o arquivo MB_gene_epression.txt atribuindo o data.frame resultante para uma matrix numérica.
# Ele contém informações da expressão de vários genes (linhas) em várias amostras (colunas).
# Leia o arquivo MB_pData_rib.txt atribindo o data.frame resultante para uma variável.
# Note que a ordem das colunas da matriz de expressão é a mesma ordem do IDs dos pacientes na tabela das informações clínicas e patológicas.
# Crie funções para:
#  a. Fazer a estatística da expressão de cada um dos genes para o o seguinte teste de hipótese (usar o teste t):
#    H0: a expressão do gene xi nas amostras do gupo A == a expressão do gene xi nas amostras do grupo B;
#    H1: a expressão do gene xi nas amostras do gupo A != a expressão do gene xi nas amostras do grupo B;
# b. Criar um boxplot para cada um dos genes diferencialmente expressos (considere o valor de p< 0.05).
install.packages("stringr rstudioapi")
library(rstudioapi)
library(stringr)
working_directory <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(working_directory)
# Ler o arquivo mb_gene_expression.txt
genes_expression <- read.delim("MB_gene_epression.txt")
# Converter o data.frame resultante para uma matrix numérica
genes_expression_matrix <- as.matrix(genes_expression)
# Ler o arquivo MB_pData_rib.txt
dados_paciente <- read.delim("MB_pData_rib.txt")
dados_paciente$PATIENT_ID <- str_replace_all(dados_paciente$PATIENT_ID, '-', '.' )
pacientes_ER_pos <- dados_paciente[dados_paciente$ER_IHC=="pos",]
pacientes_ER_neg <- dados_paciente[dados_paciente$ER_IHC=="neg",]
gerar_boxplot <- function (titulo, cjto_dados){
png(file=paste(titulo,".png"))
boxplot(cjto_dados, main=gene)
dev.off
}
teste_hipotese <- function(genes_expression, pacientes_ER_pos, pacientes_ER_neg) {
genes_ER_pos <- matrix()
genes_ER_neg <- matrix()
for (i in 1:1867) {
if (is.element(names(genes_expression)[i], pacientes_ER_pos$PATIENT_ID) )
{
genes_ER_pos <- cbind(genes_ER_pos, genes_expression[i])
}
else
{
genes_ER_neg <- cbind(genes_ER_neg, genes_expression[i])
}
}
genes_ER_pos<-genes_ER_pos[ ,-c(1)]
genes_ER_neg<-genes_ER_neg[ ,-c(1)]
pos_transposta <- t(genes_ER_pos)
neg_transposta <- t(genes_ER_neg)
#dev.new()
for(i in 1:45){
result <- t.test(pos_transposta[, i], neg_transposta[, i])
print(result)
expr_gene <- union(pos_transposta[,i], neg_transposta[, i])
if (result$p.value < 0.05) {
gene <- paste(i, " - ", colnames(pos_transposta)[i])
gerar_boxplot(gene, expr_gene)
}
}
}
teste_hipotese(genes_expression, pacientes_ER_pos, pacientes_ER_neg)
}
# 2. Leia o arquivo MB_gene_epression.txt atribuindo o data.frame resultante para uma matrix numérica.
# Ele contém informações da expressão de vários genes (linhas) em várias amostras (colunas).
# Leia o arquivo MB_pData_rib.txt atribindo o data.frame resultante para uma variável.
# Note que a ordem das colunas da matriz de expressão é a mesma ordem do IDs dos pacientes na tabela das informações clínicas e patológicas.
# Crie funções para:
#  a. Fazer a estatística da expressão de cada um dos genes para o o seguinte teste de hipótese (usar o teste t):
#    H0: a expressão do gene xi nas amostras do gupo A == a expressão do gene xi nas amostras do grupo B;
#    H1: a expressão do gene xi nas amostras do gupo A != a expressão do gene xi nas amostras do grupo B;
# b. Criar um boxplot para cada um dos genes diferencialmente expressos (considere o valor de p< 0.05).
install.packages("stringr rstudioapi")
library(rstudioapi)
library(stringr)
working_directory <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(working_directory)
# Ler o arquivo mb_gene_expression.txt
genes_expression <- read.delim("MB_gene_epression.txt")
# Converter o data.frame resultante para uma matrix numérica
genes_expression_matrix <- as.matrix(genes_expression)
# Ler o arquivo MB_pData_rib.txt
dados_paciente <- read.delim("MB_pData_rib.txt")
dados_paciente$PATIENT_ID <- str_replace_all(dados_paciente$PATIENT_ID, '-', '.' )
pacientes_ER_pos <- dados_paciente[dados_paciente$ER_IHC=="pos",]
pacientes_ER_neg <- dados_paciente[dados_paciente$ER_IHC=="neg",]
gerar_boxplot <- function (titulo, cjto_dados){
png(file=paste(titulo,".png"))
boxplot(cjto_dados, main=gene)
dev.off
}
teste_hipotese <- function(genes_expression, pacientes_ER_pos, pacientes_ER_neg) {
genes_ER_pos <- matrix()
genes_ER_neg <- matrix()
for (i in 1:1867) {
if (is.element(names(genes_expression)[i], pacientes_ER_pos$PATIENT_ID) )
{
genes_ER_pos <- cbind(genes_ER_pos, genes_expression[i])
}
else
{
genes_ER_neg <- cbind(genes_ER_neg, genes_expression[i])
}
}
genes_ER_pos<-genes_ER_pos[ ,-c(1)]
genes_ER_neg<-genes_ER_neg[ ,-c(1)]
pos_transposta <- t(genes_ER_pos)
neg_transposta <- t(genes_ER_neg)
#dev.new()
for(i in 1:45){
result <- t.test(pos_transposta[, i], neg_transposta[, i])
print(result)
expr_gene <- union(pos_transposta[,i], neg_transposta[, i])
if (result$p.value < 0.05) {
gene <- paste(i, " - ", colnames(pos_transposta)[i])
print("AI AI Iiaoisakladkljwqjklaw")
gerar_boxplot(gene, expr_gene)
}
}
}
teste_hipotese(genes_expression, pacientes_ER_pos, pacientes_ER_neg)
